name: 🔍 Validate Tools Registry

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'tools/**/*.json'
      - 'schemas/**/*.json'
      - 'scripts/**/*.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'tools/**/*.json'
      - 'schemas/**/*.json'
      - 'scripts/**/*.py'
  workflow_dispatch:

jobs:
  validate:
    name: Validate Tool Entries
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema requests pyyaml
        pip install pytest pytest-cov  # For future testing
    
    - name: 🔍 Validate JSON schemas
      run: |
        echo "🔬 Validating JSON schema files..."
        python -c "
        import json
        from pathlib import Path
        
        schemas = ['schemas/tool-entry.json', 'schemas/category.json', 'schemas/validation-rules.json']
        for schema_file in schemas:
            try:
                with open(schema_file) as f:
                    json.load(f)
                print(f'✅ {schema_file}')
            except Exception as e:
                print(f'❌ {schema_file}: {e}')
                exit(1)
        "
    
    - name: 🧪 Validate tool entries
      run: |
        echo "🔍 Validating all tool entries..."
        python scripts/validate.py --verbose
    
    - name: 📊 Generate validation report
      if: always()
      run: |
        echo "📋 Creating validation report..."
        python scripts/validate.py > validation-report.txt 2>&1 || true
        
        echo "## 🔍 Validation Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        head -50 validation-report.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    - name: 📤 Upload validation report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-report
        path: validation-report.txt
        retention-days: 7

  verify-tools:
    name: Verify Tool Accessibility
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name != 'pull_request' # Only run on main branch pushes
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema requests pyyaml
    
    - name: 🔗 Verify tool accessibility
      run: |
        echo "🌐 Verifying tool repository and documentation links..."
        python scripts/verify-tools.py --workers 3 --timeout 15
    
    - name: 📊 Generate verification report
      if: always()
      run: |
        echo "📋 Creating verification report..."
        python scripts/verify-tools.py --workers 3 --timeout 15 > verification-report.txt 2>&1 || true
        
        echo "## 🌐 Verification Results" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        head -50 verification-report.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    - name: 📤 Upload verification report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: verification-report
        path: verification-report.txt
        retention-days: 7

  generate-catalog:
    name: Generate API Catalog
    runs-on: ubuntu-latest
    needs: [validate, verify-tools]
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: write
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python  
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema requests pyyaml
    
    - name: 📊 Generate API catalogs
      run: |
        echo "🏗️ Generating API catalogs..."
        python scripts/generate-catalog.py --manifest
    
    - name: 📋 Create catalog summary
      run: |
        echo "## 📊 Generated Catalogs" >> $GITHUB_STEP_SUMMARY
        echo "| File | Size | Description |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|-------------|" >> $GITHUB_STEP_SUMMARY
        
        for file in api/*.json; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            size=$(du -h "$file" | cut -f1)
            case "$filename" in
              "catalog.json") desc="Main catalog with all tools" ;;
              "categories.json") desc="Category index with statistics" ;;
              "search.json") desc="Search index for fast lookups" ;;
              "stats.json") desc="Comprehensive statistics" ;;
              "manifest.json") desc="API manifest and documentation" ;;
              *) desc="Generated catalog file" ;;
            esac
            echo "| $filename | $size | $desc |" >> $GITHUB_STEP_SUMMARY
          fi
        done
    
    - name: 📤 Upload API catalogs
      uses: actions/upload-artifact@v4
      with:
        name: api-catalogs
        path: api/
        retention-days: 30
    
    - name: 💾 Commit updated catalogs
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [ -n "$(git status --porcelain api/)" ]; then
          git add api/
          git commit -m "🤖 Update API catalogs
          
          - Generated from latest tool entries
          - Updated statistics and indexes
          - Auto-generated by GitHub Actions
          
          🤖 Generated with Claude Code
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push
          echo "✅ Committed updated catalogs"
        else
          echo "ℹ️ No changes to commit"
        fi

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: 📦 Install dependencies  
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema requests pyyaml
    
    - name: 🚨 Quality checks
      run: |
        echo "🔍 Running quality checks..."

        # Get changed files (for PR) or all files (for manual dispatch)
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "🔍 Running quality checks on changed files..."
          git fetch origin main
          changed_files=$(git diff --name-only origin/main...HEAD | grep "\.json$" | grep "^tools/" || true)

          if [ -z "$changed_files" ]; then
            echo "ℹ️ No tool files changed in this PR"
            exit 0
          fi
        else
          echo "🔍 Running quality checks on all tool files..."
          changed_files=$(find tools/ -name "*.json" -type f)
        fi
        
        echo "📋 Changed tool files:"
        echo "$changed_files"
        echo
        
        # Validate each changed file
        all_valid=true
        for file in $changed_files; do
          if [ -f "$file" ]; then
            echo "🔍 Validating $file..."
            if python scripts/validate.py --single "$file"; then
              echo "✅ $file passed validation"
            else
              echo "❌ $file failed validation"
              all_valid=false
            fi
            echo
          fi
        done
        
        if [ "$all_valid" = false ]; then
          echo "❌ Some files failed validation. Please fix the errors before merging."
          exit 1
        fi
        
        echo "✅ All changed files passed validation!"
    
    - name: 💬 Comment on PR
      if: always() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Get validation results
          let comment = '## 🔍 Tool Validation Results\n\n';
          
          try {
            // This is a simplified version - in a real implementation, 
            // you'd parse the actual validation output
            comment += '✅ All tool entries passed validation!\n\n';
            comment += '**Quality Checks:**\n';
            comment += '- ✅ JSON schema validation\n';
            comment += '- ✅ Required fields present\n';
            comment += '- ✅ URL format validation\n';
            comment += '- ✅ Category validation\n\n';
            comment += '*This PR is ready for review.*';
          } catch (error) {
            comment += '❌ Validation failed. Please check the workflow logs for details.\n\n';
            comment += '*Please fix the validation errors before merging.*';
          }
          
          // Post comment on PR
          if (context.eventName === 'pull_request') {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }